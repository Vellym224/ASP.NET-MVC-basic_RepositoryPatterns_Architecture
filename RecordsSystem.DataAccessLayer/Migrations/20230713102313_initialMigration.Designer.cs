// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RecordsSystem.DataAccessLayer.Data;

#nullable disable

namespace RecordsSystem.DataAccessLayer.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230713102313_initialMigration")]
    partial class initialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RecordsSystem.DataAccessLayer.Entities.AddressDetail", b =>
                {
                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ComplexName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Province")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RecUserDetailId")
                        .HasColumnType("int");

                    b.Property<string>("Suburb")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UnitNumber")
                        .HasColumnType("int");

                    b.HasKey("Country");

                    b.HasIndex("RecUserDetailId");

                    b.ToTable("AddressesDetails");
                });

            modelBuilder.Entity("RecordsSystem.DataAccessLayer.Entities.CompanyDetail", b =>
                {
                    b.Property<string>("EmailAddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BusinessType")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<long>("ContactNumber")
                        .HasMaxLength(100)
                        .HasColumnType("bigint");

                    b.Property<int>("RecUserDetailId")
                        .HasColumnType("int");

                    b.Property<int>("RegistrationNumber")
                        .HasColumnType("int");

                    b.HasKey("EmailAddress");

                    b.HasIndex("RecUserDetailId");

                    b.ToTable("CompanyDetails");
                });

            modelBuilder.Entity("RecordsSystem.DataAccessLayer.Entities.EmployeeDetail", b =>
                {
                    b.Property<string>("Department")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmpRole")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RecUserDetailId")
                        .HasColumnType("int");

                    b.Property<int>("Salary")
                        .HasColumnType("int");

                    b.HasKey("Department");

                    b.HasIndex("RecUserDetailId");

                    b.ToTable("EmployeeDetails");
                });

            modelBuilder.Entity("RecordsSystem.DataAccessLayer.Entities.RecUserDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<long>("ContactNumber")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("IdentityNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("RecUserDetails");
                });

            modelBuilder.Entity("RecordsSystem.DataAccessLayer.Entities.AddressDetail", b =>
                {
                    b.HasOne("RecordsSystem.DataAccessLayer.Entities.RecUserDetail", "RecUserDetail")
                        .WithMany()
                        .HasForeignKey("RecUserDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RecUserDetail");
                });

            modelBuilder.Entity("RecordsSystem.DataAccessLayer.Entities.CompanyDetail", b =>
                {
                    b.HasOne("RecordsSystem.DataAccessLayer.Entities.RecUserDetail", "RecUserDetail")
                        .WithMany()
                        .HasForeignKey("RecUserDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RecUserDetail");
                });

            modelBuilder.Entity("RecordsSystem.DataAccessLayer.Entities.EmployeeDetail", b =>
                {
                    b.HasOne("RecordsSystem.DataAccessLayer.Entities.RecUserDetail", "RecUserDetail")
                        .WithMany()
                        .HasForeignKey("RecUserDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RecUserDetail");
                });
#pragma warning restore 612, 618
        }
    }
}
